import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-parcelize'
}

ext {
    VERSION_CODE = 26
    VERSION_NAME = '1.6.2'
    PUBLISH_ARTIFACT_ID = 'iterate'
    PUBLISH_GROUP_ID = 'com.iteratehq'
    PUBLISH_VERSION = VERSION_NAME
}

apply from: "${rootDir}/scripts/publish-module.gradle"

android {
    namespace = "com.iteratehq.iterate"
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        buildConfigField "String", "VERSION_NAME", "\"$VERSION_NAME\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig true
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.5.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0'
    implementation "io.noties.markwon:core:4.6.2"
    implementation "io.noties.markwon:image:4.6.2"
    implementation 'com.caverock:androidsvg:1.4'

    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0'
    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'org.robolectric:robolectric:4.11.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task installGitHook(type: Copy) {
    def suffix = "macos"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        suffix = "windows"
    }

    from new File(rootProject.rootDir, "scripts/pre-commit-$suffix")
    into { new File(rootProject.rootDir, '.git/hooks') }
    rename("pre-commit-$suffix", 'pre-commit')

    from new File(rootProject.rootDir, "scripts/pre-push-$suffix")
    into { new File(rootProject.rootDir, '.git/hooks') }
    rename("pre-push-$suffix", 'pre-push')

    fileMode 0775
}

tasks.getByPath(':app:preBuild').dependsOn installGitHook

// Log each test result on the terminal, e.g. PASSED, FAILED
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed"
        showStandardStreams true
    }
}
